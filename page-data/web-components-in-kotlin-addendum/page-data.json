{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/web-components-in-kotlin-addendum",
    "result": {"data":{"markdown":{"html":"<p>After finalizing my last blog I started experimenting some more and came to the conclusion that there are some cool examples\nI could still share.</p>\n<p>So here we go!</p>\n<h2 id=\"composeception\">Composeception</h2>\n<p>After establishing we could create a web component from a Compose HTML composable function, I decided to create\na specific Composable which wraps this web-component again.</p>\n<p>No you might wonder.... why? You can just use the composable making up the web-component directly. And you would be right.\nHowever, I wanted to explicitly show the composable nature of the web-component, and its encapsulation.</p>\n<h3 id=\"creating-a-composable-function-of-our-web-component\">Creating a Composable function of our web component</h3>\n<p>First we add a convenience function to our <code class=\"language-text\">EventDescriptor</code> in order to extract the payloads:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> EventDescriptor<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> bubbles<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> cancellable<span class=\"token operator\">:</span> Boolean<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> composed<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> SyntheticEvent<span class=\"token operator\">&lt;</span>org<span class=\"token punctuation\">.</span>w3c<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"UNCHECKED_CAST\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>nativeEvent <span class=\"token keyword\">as</span> CustomEvent<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> CustomEvent<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span>detail\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we add two extensions on the <code class=\"language-text\">AttrScope</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>D<span class=\"token operator\">></span> AttrsScope<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>eventDescriptor<span class=\"token operator\">:</span> WebComponent<span class=\"token punctuation\">.</span>EventDescriptor<span class=\"token operator\">&lt;</span>D<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> listener<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventDescriptor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>eventDescriptor<span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> AttrsScope<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>observedAttribute<span class=\"token operator\">:</span> WebComponent<span class=\"token punctuation\">.</span>ObservedAttribute<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>observedAttribute<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now we can create a timer composable:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span>\n    time<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    onTimerStarted<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    onTimerEnded<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    TagElement<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        tagName <span class=\"token operator\">=</span> TimerWebComponent<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">,</span>\n        applyAttrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onTimerStarted <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>TimerStarted<span class=\"token punctuation\">,</span> onTimerStarted<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onTimerEnded <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>TimerEnded<span class=\"token punctuation\">,</span> onTimerEnded<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        content <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By including them all in a new component:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@OptIn</span><span class=\"token punctuation\">(</span>ExperimentalJsExport<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@JsExport</span>\n<span class=\"token annotation builtin\">@JsName</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"MultipleTimersComponent\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> MultipleTimersComponent <span class=\"token operator\">:</span> <span class=\"token function\">ComposedWebComponent</span><span class=\"token punctuation\">(</span>Factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">object</span> Factory <span class=\"token operator\">:</span> WebComponent<span class=\"token punctuation\">.</span>Factory<span class=\"token operator\">&lt;</span>MultipleTimersComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        tagName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"multiple-timers\"</span></span><span class=\"token punctuation\">,</span>\n        clazz <span class=\"token operator\">=</span> MultipleTimersComponent<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@Composable</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        H1 <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Multiple timers\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span>\n                time <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                onTimerStarted <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Timer started: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                onTimerEnded <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Timer ended: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Hr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Hr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Hr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we include it using the <code class=\"language-text\">&lt;multiple-timers></code> tag:</p>\n<p><multiple-timers></multiple-timers></p>\n<h3 id=\"having-web-components-depend-on-each-other-and-being-idempotent\">Having web components depend on each other and being idempotent</h3>\n<p>Now we have dependencies between the components, so we need to make sure the components are registered properly.\nAlso, in SPA environments, it can be possible that the <code class=\"language-text\">register()</code> method is called multiple times, so we need to account for that.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Factory<span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> tagName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> clazz<span class=\"token operator\">:</span> CustomElementConstructor<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> attributes<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>ObservedAttribute<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> styleSheet<span class=\"token operator\">:</span> StyleSheet<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> dependencies<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Factory<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">val</span> tag <span class=\"token operator\">=</span> HtmlTagName<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>tagName<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Custom element '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">tag</span></span><span class=\"token string\">' already registered!\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n\n        clazz<span class=\"token punctuation\">.</span><span class=\"token function\">asDynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>observedAttributes <span class=\"token operator\">=</span> attributes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toTypedArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"using-the-kotlinx-html-dsl-for-a-web-component\">Using the Kotlinx HTML DSL for a Web Component</h2>\n<p>Using the <code class=\"language-text\">WebComponent</code> base it is trivial to add a web component based on the Kotlinx HTML DSL (<a href=\"https://github.com/Kotlin/kotlinx.html\">https://github.com/Kotlin/kotlinx.html</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token function\">HtmlDslWebComponent</span><span class=\"token punctuation\">(</span>\n    factory<span class=\"token operator\">:</span> Factory<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> WebComponent<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    mode<span class=\"token operator\">:</span> ShadowRootMode <span class=\"token operator\">=</span> ShadowRootMode<span class=\"token punctuation\">.</span>closed<span class=\"token punctuation\">,</span>\n    observedAttributes<span class=\"token operator\">:</span> ObservedAttributes <span class=\"token operator\">=</span> <span class=\"token function\">ObservedAttributes</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    rootElementTagName<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"main\"</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">WebComponent</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> observedAttributes<span class=\"token punctuation\">,</span> rootElementTagName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">redraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">redraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>root <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> TagConsumer<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we can use it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@OptIn</span><span class=\"token punctuation\">(</span>ExperimentalJsExport<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@JsExport</span>\n<span class=\"token annotation builtin\">@JsName</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"PingPongComponent\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> PingPongComponent <span class=\"token operator\">:</span> <span class=\"token function\">HtmlDslWebComponent</span><span class=\"token punctuation\">(</span>factory <span class=\"token operator\">=</span> Factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">object</span> Factory <span class=\"token operator\">:</span> WebComponent<span class=\"token punctuation\">.</span>Factory<span class=\"token operator\">&lt;</span>PingPongComponent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        tagName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"ping-pong\"</span></span><span class=\"token punctuation\">,</span>\n        clazz <span class=\"token operator\">=</span> PingPongComponent<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> pingOrPong <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"ping\"</span></span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n        <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> TagConsumer<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        h1 <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">+</span>pingOrPong\n        <span class=\"token punctuation\">}</span>\n\n        button <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">+</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Clicky\"</span></span>\n\n            onClickFunction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                pingOrPong <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pingOrPong <span class=\"token operator\">==</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"ping\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"pong\"</span></span> <span class=\"token keyword\">else</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"ping\"</span></span>\n                <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And by including the <code class=\"language-text\">&lt;ping-pong></code> tag we have it working as well:</p>\n<p><ping-pong></ping-pong></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I felt this addendum was a good opportunity to showcase some more of the capabilities of web components in Kotlin.</p>\n<p>Hope you enjoyed it!</p>","excerpt":"After finalizing my last blog I started experimenting some more and came to the conclusion that there are some cool examples\nI could still share. So here we go! Composeception After establishing we could create a web component from a Compose HTML…","frontmatter":{"date":"11 May, 2025","slug":"/web-components-in-kotlin-addendum","title":"Addendum on Creating Web Components in Kotlin and Compose HTML","pageScripts":[{"src":"/scripts/web-components/compose-web-components.js"}]}}},"pageContext":{"slug":"/web-components-in-kotlin-addendum","pageScripts":[{"src":"/scripts/web-components/compose-web-components.js"}]}},
    "staticQueryHashes": ["3406609010"]}