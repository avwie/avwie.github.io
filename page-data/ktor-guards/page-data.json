{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/ktor-guards",
    "result": {"data":{"markdown":{"html":"<p>The last few months I have been very busy with developing server applications using Ktor.\nKtor is a Kotlin-based framework for building asynchronous servers and clients. One of the strengths of Ktor is that\nit is highly <em>un</em>opinionated. This is very powerful in the sense that it doesn't force you to follow a specific convention\nfor developing applications and gives you total freedom. To accommodate this freedom, Ktor provides a lot of flexibility by being very modular with plugins.</p>\n<p>One of the things that I have been missing in Ktor is the ability to define route guards. Route guards are a way to protect routes from unauthorized access.\nA lot of web frameworks offer facilities to define route guards, but Ktor doesn't have this out of the box. In this blog post, I will show you how you can build route guards for Ktor 3 servers.</p>\n<h2 id=\"what-should-a-route-guard-look-like\">What should a route guard look like</h2>\n<p>A route guard is a function that is executed before the actual route handler is executed. The route guard can decide whether the route handler should be executed or not.\nExamples of route guards are:</p>\n<ul>\n<li>Authentication: check if the user is authenticated</li>\n<li>Authorization: check if the user has the right permissions</li>\n<li>Rate limiting: check if the user has exceeded the rate limit</li>\n<li>Go crazy: Only allow access to the route handler on a full moon</li>\n</ul>\n<p>The result of a route guard can be:</p>\n<ul>\n<li>Allow the route handler to be executed</li>\n<li>Deny the route handler to be executed</li>\n<li>Redirect to another route</li>\n<li>Throw an exception</li>\n<li>Respond with a HTTP status code, like <code class=\"language-text\">401 Unauthorized</code></li>\n</ul>\n<p>The input of the route guard is the current <code class=\"language-text\">ApplicationCall</code>, so a route guard can access the request, response, and other information about the current request.</p>\n<p>So in essence, one can define a route guard as a simple interface</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> RouteGuard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> ApplicationCall<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AuthorizationResult\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">sealed</span> <span class=\"token keyword\">interface</span> AuthorizationResult <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">object</span> Success <span class=\"token operator\">:</span> AuthorizationResult\n    <span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Unauthorized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> message<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> statusCode<span class=\"token operator\">:</span> HttpStatusCode <span class=\"token operator\">=</span> HttpStatusCode<span class=\"token punctuation\">.</span>Forbidden<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> AuthorizationResult\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This gives us a very simple interface to implement for route guards. The <code class=\"language-text\">AuthorizationResult</code> clearly communicates the result of the route guard.</p>\n<p>However, we might want to have a more flexible way to handle what happens when the authorization fails. For example, we might want to redirect to another route, or we might want to throw an exception.</p>\n<p>To accommodate this we augment the route guard with an <em>optional</em> <code class=\"language-text\">val onUnauthorized: OnUnauthorized?</code> parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">typealias</span> OnUnauthorized <span class=\"token operator\">=</span> <span class=\"token keyword\">suspend</span> <span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> ApplicationCall<span class=\"token punctuation\">,</span> result<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">.</span>AuthorizationResult<span class=\"token punctuation\">.</span>Unauthorized<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit\n\n<span class=\"token keyword\">interface</span> RouteGuard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> onUnauthorized<span class=\"token operator\">:</span> OnUnauthorized<span class=\"token operator\">?</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> ApplicationCall<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AuthorizationResult\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"how-not-to-implement-it\">How <em>NOT</em> to implement it</h2>\n<p>I read quite a few blogposts about how to implement route guards, but a few of them make a thinking error. They add a <code class=\"language-text\">RouteScopedPlugin</code> to a <code class=\"language-text\">Routing</code> block like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> MyRouteGuardPlugin <span class=\"token operator\">=</span> <span class=\"token function\">createRouteScopedPlugin</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"...\"</span></span><span class=\"token punctuation\">,</span> createConfiguration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// .... implementation</span>\n    \n    onCall <span class=\"token punctuation\">{</span> call <span class=\"token operator\">-></span>\n        <span class=\"token comment\">// .... implementation</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> Route<span class=\"token punctuation\">.</span><span class=\"token function\">guard</span><span class=\"token punctuation\">(</span>roles<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> Route<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>MyRouteGuardPlugin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// adding the roles to the config</span>\n    <span class=\"token punctuation\">}</span>     \n    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Usage</span>\nrouting <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">guard</span><span class=\"token punctuation\">(</span><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"admin\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/admin\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello admin\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello world\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is incorrect! Because you can basically rewrite the above <code class=\"language-text\">routing</code> block to:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">routing <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>MyRouteGuardPlugin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// adding the roles to the config</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/admin\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello admin\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello world\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Can you see the subtle difference? The <code class=\"language-text\">MyRouteGuardPlugin</code> is applied to all the routes, so the <code class=\"language-text\">/</code> route is also protected now. This is not what we want. We only want to protect the <code class=\"language-text\">/admin</code> route.</p>\n<h2 id=\"implementing-the-routeguardplugin\">Implementing the RouteGuardPlugin</h2>\n<p>To implement route guards correctly, we first need to have a <code class=\"language-text\">RouteGuardPlugin</code> that actually handles the guarding of the routes.\nWe use a <code class=\"language-text\">RouteScopedPlugin</code> for this with a configuration block that defines the guard.</p>\n<p>First we define the configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> RouteGuardPluginConfiguration <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> onUnauthorized<span class=\"token operator\">:</span> OnUnauthorized <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> result <span class=\"token operator\">-></span>\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">,</span> text <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see we also define an <code class=\"language-text\">onUnauthorized</code> handler on the plugin level. This is the default handler that is called when no <code class=\"language-text\">onUnauthorized</code> handler is defined on the <code class=\"language-text\">RouteGuard</code>.</p>\n<p>Next, we define the <code class=\"language-text\">RouteGuardPlugin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">RouteGuardPlugin</span><span class=\"token punctuation\">(</span>guard<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">createRouteScopedPlugin</span><span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"GuardPlugin\"</span></span><span class=\"token punctuation\">,</span>\n    createConfiguration <span class=\"token operator\">=</span> <span class=\"token operator\">::</span>RouteGuardPluginConfiguration\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    onCall <span class=\"token punctuation\">{</span> call <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> guard<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">is</span> Guard<span class=\"token punctuation\">.</span>AuthorizationResult<span class=\"token punctuation\">.</span>Success <span class=\"token operator\">-></span> <span class=\"token keyword\">return</span><span class=\"token label symbol\">@onCall</span>\n            <span class=\"token keyword\">is</span> Guard<span class=\"token punctuation\">.</span>AuthorizationResult<span class=\"token punctuation\">.</span>Unauthorized <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">(</span>guard<span class=\"token punctuation\">.</span>onUnauthorized <span class=\"token operator\">?:</span> pluginConfig<span class=\"token punctuation\">.</span>onUnauthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When a call comes in, this plugin hooks into that call and iterates over all the guards and checks if the route is authorized.\nIf not, it calls the <code class=\"language-text\">onUnauthorized</code> handler of the guard, or the default <code class=\"language-text\">onUnauthorized</code> handler of the plugin and end  </p>\n<h2 id=\"installing-the-routeguardplugin\">Installing the RouteGuardPlugin</h2>\n<p>To install the <code class=\"language-text\">RouteGuardPlugin</code> we need to define a <code class=\"language-text\">guard</code> function that installs the plugin and adds the guard to the configuration.\nHowever, we must make sure we don't make the same error as above where the scope of the plugin is wrong. </p>\n<p>We want something like this (pseudo code):</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">routing <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>RouteGuardPlugin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">guard</span><span class=\"token punctuation\">(</span><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/admin\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello admin\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello world\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The exact code above is not possible, but we can achieve this by creating our own <code class=\"language-text\">RouteSelector</code>. Every 'route' in the <code class=\"language-text\">routing</code> block is actually a <code class=\"language-text\">RouteSelector</code> that is added to the <code class=\"language-text\">Routing</code> block.\nKtor provides a lot of implementations themselves, but we can also create our own. </p>\n<p>A <code class=\"language-text\">RouteSelector</code> is defined as:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> RouteSelector <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * Evaluates this selector against [context] and a path segment at [segmentIndex].\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> RoutingResolveContext<span class=\"token punctuation\">,</span> segmentIndex<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RouteSelectorEvaluation\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, what is this <code class=\"language-text\">RouteSelectorEvaluation</code>? Looking in the source code we see that it is a <code class=\"language-text\">sealed class</code> and it has a lot of implementation.\nBasically it defines the success or failure of the evaluation of the <code class=\"language-text\">RouteSelector</code> and some additional information regarding how 'good' the match was.</p>\n<p>Luckily, there is the following predefined <code class=\"language-text\">RouteSelectorEvaluation</code> we can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * Routing evaluation succeeded for a [qualityTransparent] value. Useful for helper DSL methods that may wrap\n * routes but should not change priority of routing.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">val</span> Transparent<span class=\"token operator\">:</span> RouteSelectorEvaluation <span class=\"token operator\">=</span>\n    RouteSelectorEvaluation<span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span>RouteSelectorEvaluation<span class=\"token punctuation\">.</span>qualityTransparent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Looking at the comments, this is exactly what we need? But how do we use it? Well, besides the pretty DSL for routing we can actually just use\n<em>imperative</em> code to define the routes as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// first define our own RouteSelector</span>\n<span class=\"token keyword\">class</span> RouteGuardRouteSelector <span class=\"token operator\">:</span> <span class=\"token function\">RouteSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> RoutingResolveContext<span class=\"token punctuation\">,</span> segmentIndex<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RouteSelectorEvaluation <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> RouteSelectorEvaluation<span class=\"token punctuation\">.</span>Transparent\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// then allow us to use the selector on a `Route` object (`Routing` is also a `Route`)</span>\n<span class=\"token keyword\">fun</span> Route<span class=\"token punctuation\">.</span><span class=\"token function\">guard</span><span class=\"token punctuation\">(</span>guard<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">,</span> onUnauthorized<span class=\"token operator\">:</span> OnUnauthorized<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> build<span class=\"token operator\">:</span> Route<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> guardRoute <span class=\"token operator\">=</span> <span class=\"token function\">createChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">RouteGuardRouteSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    guardRoute<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token function\">RouteGuardPlugin</span><span class=\"token punctuation\">(</span>guard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onUnauthorized <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onUnauthorized <span class=\"token operator\">=</span> onUnauthorized\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    guardRoute<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// and a simple helper function to make it more readable</span>\n<span class=\"token keyword\">fun</span> Route<span class=\"token punctuation\">.</span><span class=\"token function\">guard</span><span class=\"token punctuation\">(</span>guard<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">,</span> build<span class=\"token operator\">:</span> Route<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">guard</span><span class=\"token punctuation\">(</span>guard <span class=\"token operator\">=</span> guard<span class=\"token punctuation\">,</span> onUnauthorized <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> build <span class=\"token operator\">=</span> build<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"putting-it-all-together\">Putting it all together</h2>\n<p>Imagine we have a few guards defined like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> roles<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> ApplicationCall<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AuthorizationResult <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span>principal<span class=\"token operator\">&lt;</span>UserPrincipal<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token keyword\">return</span> AuthorizationResult<span class=\"token punctuation\">.</span><span class=\"token function\">Unauthorized</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Unauthorized\"</span></span><span class=\"token punctuation\">,</span> HttpStatusCode<span class=\"token punctuation\">.</span>Unauthorized<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>roles<span class=\"token punctuation\">.</span><span class=\"token function\">ll</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">.</span>roles<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> AuthorizationResult<span class=\"token punctuation\">.</span>Success\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> AuthorizationResult<span class=\"token punctuation\">.</span><span class=\"token function\">Unauthorized</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Unauthorized\"</span></span><span class=\"token punctuation\">,</span> HttpStatusCode<span class=\"token punctuation\">.</span>Forbidden<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> isAuthenticated<span class=\"token operator\">:</span> Guard <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> ApplicationCall<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AuthorizationResult <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span>principal<span class=\"token operator\">&lt;</span>UserPrincipal<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            AuthorizationResult<span class=\"token punctuation\">.</span>Success\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            AuthorizationResult<span class=\"token punctuation\">.</span><span class=\"token function\">Unauthorized</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Unauthorized\"</span></span><span class=\"token punctuation\">,</span> HttpStatusCode<span class=\"token punctuation\">.</span>Unauthorized<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> fullMoon <span class=\"token operator\">:</span> Guard <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// I have no clue how to implement this</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we can simply use our <code class=\"language-text\">guard</code> function to protect our routes:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">routing <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">guard</span><span class=\"token punctuation\">(</span>isAuthenticated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/user\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello in your user profile\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token function\">guard</span><span class=\"token punctuation\">(</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span>'admin'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/admin\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello admin\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello world\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One can easily extend it with some helper functions as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> guards<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> onUnauthorized<span class=\"token operator\">:</span> OnUnauthorized<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> ApplicationCall<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AuthorizationResult <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>guards<span class=\"token punctuation\">.</span><span class=\"token function\">all</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> AuthorizationResult<span class=\"token punctuation\">.</span>Success <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> AuthorizationResult<span class=\"token punctuation\">.</span>Success\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> AuthorizationResult<span class=\"token punctuation\">.</span><span class=\"token function\">Unauthorized</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Unauthorized\"</span></span><span class=\"token punctuation\">,</span> HttpStatusCode<span class=\"token punctuation\">.</span>Forbidden<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">anyOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">vararg</span> guards<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> onUnauthorized<span class=\"token operator\">:</span> OnUnauthorized<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> ApplicationCall<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AuthorizationResult <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>guards<span class=\"token punctuation\">.</span><span class=\"token function\">any</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> AuthorizationResult<span class=\"token punctuation\">.</span>Success <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> AuthorizationResult<span class=\"token punctuation\">.</span>Success\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> AuthorizationResult<span class=\"token punctuation\">.</span><span class=\"token function\">Unauthorized</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Unauthorized\"</span></span><span class=\"token punctuation\">,</span> HttpStatusCode<span class=\"token punctuation\">.</span>Forbidden<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">or</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> Guard<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Guard <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">anyOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which results in the following usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">routing <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">guard</span><span class=\"token punctuation\">(</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>isAuthenticated<span class=\"token punctuation\">,</span> isFullMoon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// we have a a security hole during full moon</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/user\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello in your user profile\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/admin\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello admin\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        call<span class=\"token punctuation\">.</span><span class=\"token function\">respondText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello world\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I hope this blog post gives you a good idea of how you can implement route guards in Ktor. If you have any questions,\nor have seen any errors, please let me know by sending me an email. I am always happy to help you out or learn.</p>","frontmatter":{"date":"22 Nov, 2024","slug":"/ktor-guards","title":"Building Route Guards for Ktor 3 servers","pageScripts":null}}},"pageContext":{"slug":"/ktor-guards","pageScripts":null}},
    "staticQueryHashes": ["3406609010"]}