{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/mandelbrot-in-compose-multiplatform",
    "result": {"data":{"markdown":{"html":"<p>I decided to experiment with Compose Multiplatform, the declarative UI framework, even though I hardly know Compose. Since I am not an Android developer it was a bit confusing to get started with, because there are multiple artifacts that are called 'Compose'. This is related to the origin of Compose. </p>\n<p>As far as I understand it it is as follows: JetPack Compose is the declarative UI toolkit being developed by the Google Android team. This consists of a few components:</p>\n<ul>\n<li>The Compose Runtime, which is the core of Compose and is not specifically related to UI's. It is a very novel way of working with tree structures that mutate over time. And since UI's can be modelled as trees this is a nice fit.</li>\n<li>Compose UI, the layer which sits on top of the runtime and contains the UI building blocks</li>\n<li>Compose Material, the Material Design implementation in Compose UI</li>\n</ul>\n<p>However, Jetbrains (not affiliated at all with JetPack) identified that the Compose Runtime is not at all bound to the Android platform and forked it, resulting in:</p>\n<ul>\n<li>Compose Multiplatform, the runtime and the building blocks for using Compose Runtime in Kotlin Multiplatform Common code</li>\n<li>Compose for Desktop, contains Compose UI and Compose Material implementations for the JVM</li>\n<li>Compose for Web, contains a Compose implementation for the DOM, which allows you to write Composables for the Web</li>\n</ul>\n<p>More can be found here: <a href=\"https://www.jetbrains.com/lp/compose-mpp/\">Compose Multiplatform</a></p>\n<p>However.... there is also an experimental directory in their repository: <a href=\"https://github.com/JetBrains/compose-jb/tree/master/experimental\">https://github.com/JetBrains/compose-jb/tree/master/experimental</a>. And that one contains very interesting examples. It appears that they are experimenting with making it possible to reuse Compose UI and Compose Material across all platforms. This includes JVM, Native desktop targets, iOS targets, and a Web target via HTML Canvas.</p>\n<p>Together with my idea to test coroutines for calculating solutions to <a href=\"https://en.wikipedia.org/wiki/Embarrassingly_parallel\">embarrassingly parallel</a> problems I had a nice small coding target. I wanted to make a Mandelbrot Viewer in Kotlin Compose Multiplatform, making it work in the most amount of platforms available with only common code.</p>\n<h2 id=\"mandelbrot-calculation\">Mandelbrot calculation</h2>\n<p>Much has been said about the Mandelbrot and I am not going to rehash that here. It is a very well described problem and I will only be showing the implementation. </p>\n<p>The core algorithm is pretty simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>cx0<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span> cy0<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>xn<span class=\"token punctuation\">,</span> yn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span> <span class=\"token keyword\">to</span> <span class=\"token number\">0.0</span>\n\n    <span class=\"token keyword\">var</span> xtemp<span class=\"token operator\">:</span> Double\n    <span class=\"token keyword\">var</span> ytemp<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>xn <span class=\"token operator\">*</span> xn <span class=\"token operator\">+</span> yn <span class=\"token operator\">*</span> yn <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        xtemp <span class=\"token operator\">=</span> xn <span class=\"token operator\">*</span> xn <span class=\"token operator\">-</span> yn <span class=\"token operator\">*</span> yn\n        ytemp <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> xn <span class=\"token operator\">*</span> yn\n        xn <span class=\"token operator\">=</span> xtemp <span class=\"token operator\">+</span> cx0\n        yn <span class=\"token operator\">=</span> ytemp <span class=\"token operator\">+</span> cy0\n        i<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here <code class=\"language-text\">cx0</code> and <code class=\"language-text\">cy0</code> are the starting points in the complex plane (<code class=\"language-text\">cx0 + i * cxy0</code>) which is used as the input. The <code class=\"language-text\">limit</code> is the amount of iteratons until the algorithm decides the starting point is part of the Mandelbrot set.</p>\n<p>Since this is only 1 pixel we need to expand it to a full map. I'll use a simple datastructure for that:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">MandelbrotMap</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> options<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> buffer<span class=\"token operator\">:</span> IntArray\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Options</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">val</span> xMin<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">val</span> xMax<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">val</span> xRes<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">val</span> yMin<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">val</span> yMax<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">val</span> yRes<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">val</span> limit<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">128</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">buffer</code> is a flat array which will contain the results from the calculations for the complete viewport, which is described by the <code class=\"language-text\">Options</code> data structure. To calculate the Map we use the following routine:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">,</span> parallel<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> coroutineScope <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">IntArray</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>xRes <span class=\"token operator\">*</span> options<span class=\"token punctuation\">.</span>yRes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> until options<span class=\"token punctuation\">.</span>yRes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> y <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">val</span> block <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> until options<span class=\"token punctuation\">.</span>xRes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">-></span>\n                <span class=\"token keyword\">val</span> cx0 <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>xMin <span class=\"token operator\">+</span> x <span class=\"token operator\">*</span> options<span class=\"token punctuation\">.</span>deltaX\n                <span class=\"token keyword\">val</span> cy0 <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>yMin <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> options<span class=\"token punctuation\">.</span>deltaY\n                buffer<span class=\"token punctuation\">[</span>y <span class=\"token operator\">*</span> options<span class=\"token punctuation\">.</span>xRes <span class=\"token operator\">+</span> x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>cx0<span class=\"token punctuation\">,</span> cy0<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parallel<span class=\"token punctuation\">)</span> launch <span class=\"token punctuation\">{</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">MandelbrotMap</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is where the parallelization happens. I have a parameter called <code class=\"language-text\">parallel</code> which decides whether or not we split the work. Currently I decided to launch a coroutine for every row. This is completely arbitrary. Since this algorithm is embarrassingly parallel, we don't need to worry about shared mutable state. Every pixel writes in its own index in the buffer. Please note that we defer the context of the coroutine to the caller of this function.</p>\n<h2 id=\"mandelbrot-plotting\">Mandelbrot plotting</h2>\n<p>Now we have a linear array of integer values which is not very pleasing to the eye. So we need to convert it to a bitmap. Since I want to use it in Compose I figured I needed to render it inside a <code class=\"language-text\">Canvas</code> which contains a <code class=\"language-text\">drawImage</code> function. This <code class=\"language-text\">drawImage</code> function requires a <code class=\"language-text\">androidx.compose.ui.graphics.ImageBitmap</code>. But I found no way to implement such an <code class=\"language-text\">ImageBitmap</code> interface. However, with the help from the Kotli Slack channel I learned that we can use a <code class=\"language-text\">org.jetbrains.skia.Bitmap</code> and leverage the extension function <code class=\"language-text\">toComposeImageBitmap</code> on that class to transform it. </p>\n<p>Now I only needed to find out how to make a <code class=\"language-text\">Bitmap</code>. After scouring Slack and diving into the code of <a href=\"https://github.com/kirill-grouchnikov\">Kirill Grouchnikov</a> I managed to create a Skia Bitmap using a nice helper function:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> BitmapBuilderScope <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">buildBitmap</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> BitmapBuilderScope<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">BitmapBuilder</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">BitmapBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> width<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> height<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BitmapBuilderScope <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> bytes <span class=\"token operator\">=</span> <span class=\"token function\">ByteArray</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> ColorType<span class=\"token punctuation\">.</span>RGBA_8888<span class=\"token punctuation\">.</span>bytesPerPixel<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        bytes<span class=\"token punctuation\">[</span>index <span class=\"token operator\">*</span> ColorType<span class=\"token punctuation\">.</span>RGBA_8888<span class=\"token punctuation\">.</span>bytesPerPixel <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span>red <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        bytes<span class=\"token punctuation\">[</span>index <span class=\"token operator\">*</span> ColorType<span class=\"token punctuation\">.</span>RGBA_8888<span class=\"token punctuation\">.</span>bytesPerPixel <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span>green <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        bytes<span class=\"token punctuation\">[</span>index <span class=\"token operator\">*</span> ColorType<span class=\"token punctuation\">.</span>RGBA_8888<span class=\"token punctuation\">.</span>bytesPerPixel <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span>blue <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        bytes<span class=\"token punctuation\">[</span>index <span class=\"token operator\">*</span> ColorType<span class=\"token punctuation\">.</span>RGBA_8888<span class=\"token punctuation\">.</span>bytesPerPixel <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> Color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until width<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>y <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until height<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> index <span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> x\n        <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> bitmap <span class=\"token operator\">=</span> <span class=\"token function\">Bitmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> info <span class=\"token operator\">=</span> <span class=\"token function\">ImageInfo</span><span class=\"token punctuation\">(</span>\n            colorInfo <span class=\"token operator\">=</span> <span class=\"token function\">ColorInfo</span><span class=\"token punctuation\">(</span>\n                colorType <span class=\"token operator\">=</span> ColorType<span class=\"token punctuation\">.</span>RGBA_8888<span class=\"token punctuation\">,</span>\n                alphaType <span class=\"token operator\">=</span> ColorAlphaType<span class=\"token punctuation\">.</span>PREMUL<span class=\"token punctuation\">,</span>\n                colorSpace <span class=\"token operator\">=</span> ColorSpace<span class=\"token punctuation\">.</span>sRGB\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">,</span>\n            height <span class=\"token operator\">=</span> height\n        <span class=\"token punctuation\">)</span>\n        bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">allocPixels</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n        bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">installPixels</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> bitmap\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And rendering the Mandelbrot buffer becomes trivial now;</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">asBitmap</span><span class=\"token punctuation\">(</span>colorMap<span class=\"token operator\">:</span> ColorMap<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap <span class=\"token operator\">=</span> <span class=\"token function\">buildBitmap</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> min <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">minOrNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">val</span> max <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">maxOrNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> options<span class=\"token punctuation\">.</span>limit\n\n    <span class=\"token comment\">// precalcualte the color map values</span>\n    <span class=\"token keyword\">val</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">..</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> colorMap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">toFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toTypedArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token label symbol\">@MandelbrotMap</span><span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">forEachIndexed</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">,</span>  value <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            options<span class=\"token punctuation\">.</span>limit <span class=\"token operator\">-></span> Color<span class=\"token punctuation\">.</span>Black\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> colors<span class=\"token punctuation\">[</span>value <span class=\"token operator\">-</span> min<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> color\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see we need a <code class=\"language-text\">ColorMap</code>, which is defined as:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token keyword\">interface</span> ColorMap <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Float<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Color\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The implementation is in my repository, but not important for this post.</p>\n<h2 id=\"building-the-viewmodel\">Building the ViewModel</h2>\n<p>I like to work with ViewModels. They contain all the interactions and all the important state-handling so the view itself can just to the thing it is meant to... creating a view.</p>\n<p>The whole viewmodel is written as:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">MandelbrotViewerModel</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">:</span> CoroutineScope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> currentCalculationJob <span class=\"token operator\">:</span> Job <span class=\"token operator\">=</span> <span class=\"token function\">Job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> minResolution <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> viewPorts <span class=\"token operator\">=</span> <span class=\"token function\">MutableStateFlow</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">Viewport</span><span class=\"token punctuation\">(</span>\n            width <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.141</span><span class=\"token punctuation\">,</span>\n            y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.2678</span><span class=\"token punctuation\">,</span>\n            xScale <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> limits <span class=\"token operator\">=</span> <span class=\"token function\">MutableStateFlow</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> parallel <span class=\"token operator\">=</span> <span class=\"token function\">MutableStateFlow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> colorMaps <span class=\"token operator\">=</span> <span class=\"token function\">MutableStateFlow</span><span class=\"token punctuation\">(</span>ColorMap<span class=\"token punctuation\">.</span>Plasma<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> mandelbrots <span class=\"token operator\">=</span> <span class=\"token function\">MutableStateFlow</span><span class=\"token punctuation\">(</span>MandelbrotMap<span class=\"token punctuation\">.</span>UNIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> options <span class=\"token operator\">=</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>viewPorts<span class=\"token punctuation\">,</span> limits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> viewPort<span class=\"token operator\">:</span> Viewport<span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> Int <span class=\"token operator\">-></span>\n        MandelbrotMap<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">.</span><span class=\"token function\">fromViewport</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">val</span> bitmaps <span class=\"token operator\">=</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>mandelbrots<span class=\"token punctuation\">,</span> colorMaps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> mandelbrot<span class=\"token punctuation\">,</span> colorMap <span class=\"token operator\">-></span> mandelbrot<span class=\"token punctuation\">.</span><span class=\"token function\">asBitmap</span><span class=\"token punctuation\">(</span>colorMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n        scope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// here we offload the calculations to the Default dispatcher</span>\n            <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> parallel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> options<span class=\"token operator\">:</span> MandelbrotMap<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">,</span> parallel<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">-></span>\n                <span class=\"token function\">calculateMandelbrotMaps</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> parallel<span class=\"token punctuation\">,</span> resolutions <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> minResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">updateColorMap</span><span class=\"token punctuation\">(</span>colorMap<span class=\"token operator\">:</span> ColorMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colorMaps<span class=\"token punctuation\">.</span><span class=\"token function\">update</span> <span class=\"token punctuation\">{</span> colorMap <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">updateSize</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">:</span> IntSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viewPorts<span class=\"token punctuation\">.</span><span class=\"token function\">update</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">=</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">updatePosition</span><span class=\"token punctuation\">(</span>offset<span class=\"token operator\">:</span> Offset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viewPorts<span class=\"token punctuation\">.</span><span class=\"token function\">update</span> <span class=\"token punctuation\">{</span> viewPort <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> MandelbrotMap<span class=\"token punctuation\">.</span>Options\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromViewport</span><span class=\"token punctuation\">(</span>viewPort<span class=\"token punctuation\">,</span> limits<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">convertScreenCoordinates</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n            viewPort<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">zoom</span><span class=\"token punctuation\">(</span>amount<span class=\"token operator\">:</span> Float<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viewPorts<span class=\"token punctuation\">.</span><span class=\"token function\">update</span> <span class=\"token punctuation\">{</span> viewPort <span class=\"token operator\">-></span> viewPort<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>xScale <span class=\"token operator\">=</span> viewPort<span class=\"token punctuation\">.</span>xScale <span class=\"token operator\">*</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setParallel</span><span class=\"token punctuation\">(</span>parallel<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parallel<span class=\"token punctuation\">.</span><span class=\"token function\">update</span> <span class=\"token punctuation\">{</span> parallel <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setMinResolution</span><span class=\"token punctuation\">(</span>resolution<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        minResolution <span class=\"token operator\">=</span> resolution\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">calculateMandelbrotMaps</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> MandelbrotMap<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">,</span> parallel<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> resolutions<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> coroutineScope <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// this can probably be done nicer, but don't know how atm.</span>\n        <span class=\"token comment\">// the idea is to cancel any running calculations when the inputs change</span>\n        currentCalculationJob<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        currentCalculationJob <span class=\"token operator\">=</span> launch <span class=\"token punctuation\">{</span>\n            resolutions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> resolution <span class=\"token operator\">-></span>\n                mandelbrots<span class=\"token punctuation\">.</span><span class=\"token function\">update</span> <span class=\"token punctuation\">{</span>\n                    MandelbrotMap<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">withResolution</span><span class=\"token punctuation\">(</span>resolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parallel<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I like to refrain from using any Compose states in the view models, and only rely on <code class=\"language-text\">StateFlow</code> for states and <code class=\"language-text\">Flow</code> for derived states. The exposed functions modify the inputs for the calculations of the maps and on any change of the input parameters the <code class=\"language-text\">mandelbrots</code> StateFlow is updated with the latest <code class=\"language-text\">MandelbrotMap</code>. The <code class=\"language-text\">bitmaps</code> Flow is a simple mapping of <code class=\"language-text\">MandelbrotMap</code> to <code class=\"language-text\">Bitmap</code>.</p>\n<p>Another interesting trick is that I calculate the Mandelbrot with increased resolutions. This means that when navigating to the Mandelbrot you get a coarse low-res view fast, and a high-res view later. </p>\n<h2 id=\"building-the-compose-view\">Building the Compose View</h2>\n<p>Now is the interesting part. We are making a view in <code class=\"language-text\">common</code> only code. This required some <code class=\"language-text\">gradle.kts</code> dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">kotlin</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"multiplatform\"</span></span><span class=\"token punctuation\">)</span> version <span class=\"token string-literal singleline\"><span class=\"token string\">\"1.7.10\"</span></span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.jetbrains.compose\"</span></span><span class=\"token punctuation\">)</span> version <span class=\"token string-literal singleline\"><span class=\"token string\">\"1.2.0\"</span></span>\n<span class=\"token punctuation\">}</span>\n\nkotlin <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    sourceSets <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> commonMain <span class=\"token keyword\">by</span> getting <span class=\"token punctuation\">{</span>\n            dependencies <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.jetbrains.skiko:skiko:0.7.35\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span>compose<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span>compose<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We start with the main app:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">MandelbrotApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> scope <span class=\"token operator\">=</span> <span class=\"token function\">rememberCoroutineScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> model <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">MandelbrotViewerModel</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    MaterialTheme <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">MandelbrotViewer</span><span class=\"token punctuation\">(</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The viewer is defined like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">MandelbrotViewer</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> MandelbrotViewerModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> requester <span class=\"token operator\">=</span> remember <span class=\"token punctuation\">{</span> <span class=\"token function\">FocusRequester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        requester<span class=\"token punctuation\">.</span><span class=\"token function\">requestFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    Box <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">MandelbrotPlot</span><span class=\"token punctuation\">(</span>requester<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">Box</span><span class=\"token punctuation\">(</span>modifier <span class=\"token operator\">=</span> Modifier<span class=\"token punctuation\">.</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span>Alignment<span class=\"token punctuation\">.</span>BottomCenter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">MandelbrotControls</span><span class=\"token punctuation\">(</span>requester<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We need the <code class=\"language-text\">requester</code> there to bring back focus to the canvas in the plot part. </p>\n<p>The <code class=\"language-text\">MandelbrotControls</code> are not that interesting and can be viewed in the Github repo, however the <code class=\"language-text\">MandelbrotPlot</code> is interesting and is defined as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@OptIn</span><span class=\"token punctuation\">(</span>ExperimentalComposeUiApi<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@Composable</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">MandelbrotPlot</span><span class=\"token punctuation\">(</span>\n    requester<span class=\"token operator\">:</span> FocusRequester<span class=\"token punctuation\">,</span>\n    model<span class=\"token operator\">:</span> MandelbrotViewerModel\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> bitmap <span class=\"token keyword\">by</span> model<span class=\"token punctuation\">.</span>bitmaps<span class=\"token punctuation\">.</span><span class=\"token function\">collectAsState</span><span class=\"token punctuation\">(</span>EMPTY_BITMAP<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> minResolution <span class=\"token operator\">=</span> LocalDensity<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>density<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">LaunchedEffect</span><span class=\"token punctuation\">(</span>minResolution<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">setMinResolution</span><span class=\"token punctuation\">(</span>minResolution<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">Canvas</span><span class=\"token punctuation\">(</span>modifier <span class=\"token operator\">=</span> Modifier\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fillMaxSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">focusRequester</span><span class=\"token punctuation\">(</span>requester<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">focusable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onPointerEvent</span><span class=\"token punctuation\">(</span>PointerEventType<span class=\"token punctuation\">.</span>Release<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> position <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>changes<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>position\n            requester<span class=\"token punctuation\">.</span><span class=\"token function\">requestFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            model<span class=\"token punctuation\">.</span><span class=\"token function\">updatePosition</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onKeyEvent</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n                it<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!=</span> KeyEventType<span class=\"token punctuation\">.</span>KeyUp <span class=\"token operator\">-></span> <span class=\"token boolean\">false</span>\n                it<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> Key<span class=\"token punctuation\">.</span>DirectionUp <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    model<span class=\"token punctuation\">.</span><span class=\"token function\">zoom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">}</span>\n                it<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> Key<span class=\"token punctuation\">.</span>DirectionDown <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    model<span class=\"token punctuation\">.</span><span class=\"token function\">zoom</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">onSizeChanged</span> <span class=\"token punctuation\">{</span> size <span class=\"token operator\">-></span> model<span class=\"token punctuation\">.</span><span class=\"token function\">updateSize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>\n            image <span class=\"token operator\">=</span> bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">asComposeImageBitmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            dstSize <span class=\"token operator\">=</span> <span class=\"token function\">IntSize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As can be seen this is pretty straightforward! I handle some UI events and I set the minimum resolution to the LocalDensitity.</p>\n<h2 id=\"launching-it-on-jvm-js-and-ios\">Launching it on JVM, JS and iOS</h2>\n<p>Looking at the examples in the experimental folder of Jetbrains I decided to copy/paste most of the <code class=\"language-text\">gradle</code> configuration. However there were some issues:</p>\n<ul>\n<li>Kotlin 1.7.20 contains the new native memory model, but the JS part doesn't compile. So I needed to set some properties in the gradle.properties file</li>\n<li>I can't get Arm64 targets working, I think because they aren't supported yet</li>\n</ul>\n<p>Since this is highly experimental I am okay with that.</p>\n<p>However, after some tinkering I managed to get it working on JVM, JS, and iPad!</p>\n<video controls width=\"100%\">\n    <source src=\"/movies/mandelbrot.mp4\" type=\"video/mp4\">\n</video>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This was very fun to do and it amazed me how far I got. The Slack channel of Kotlin was amazingly helpful once again.\nSeeing as it is highly experimental it really shows it has a lot of potential.</p>\n<p>I can't understate how awesome it would be to have shared UI code across platforms. Granted, there are big differences between platforms, so you probably need to do platform-specific modifications. However, it would be awesome if this can be done from the comfort of Kotlin code.</p>\n<p>The code for the repository can be found here: <a href=\"https://github.com/avwie/mandelbrot-compose-multiplatform\">https://github.com/avwie/mandelbrot-compose-multiplatform</a>\nPlease let me know on Github if you have any questions!</p>","frontmatter":{"date":"14 Oct, 2022","slug":"/mandelbrot-in-compose-multiplatform","title":"Building a Mandelbrot viewer in Compose Multiplatform","pageScripts":null}}},"pageContext":{"slug":"/mandelbrot-in-compose-multiplatform","pageScripts":null}},
    "staticQueryHashes": ["3406609010"]}