{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Creating multiplatform Conflict Free Replicated Data Types in Kotlin Multiplatform","slug":"/creating-multiplatform-crdts","date":"15-Jul 2022"},"excerpt":"Sometime ago I was tinkering with some application that required state to be synchronized across different 'nodes'. \nIn a previous job we already used something similar and I knew it was based on the idea of Conflict-Free Replicated\nData…","timeToRead":26}},{"node":{"frontmatter":{"title":"Creating an MVI architecture in Compose Multiplatform","slug":"/mvi-architecture-in-compose-multiplatform","date":"30-May 2022"},"excerpt":"Recently I've gotten very interested in Jetpack Compose. I mistakenly thought it was just a way of declaratively building a UI and having it automatically updated in some clever way. Much like my own virtual DOM implementation but more…","timeToRead":12}},{"node":{"frontmatter":{"title":"Multithreaded web applications in Kotlin with Web Workers","slug":"/multithreaded-web-applications-in-kotlin-with-web-workers","date":"25-Apr 2022"},"excerpt":"One of the things that always interested me, but so far I never have used, are Web Workers. To quote the MDN documentation here: \"Web Workers are a simple means for web content to run scripts in background threads.\" This interests me…","timeToRead":10}},{"node":{"frontmatter":{"title":"Building a multiplatform virtual DOM in Kotlin","slug":"/virtual-dom-in-kotlin","date":"19-Apr 2022"},"excerpt":"Based on my previous blog post about a multiplatform DOM DSL I got some more inspiration. I used an NPM library called virtual-dom to implement a virtual DOM in the JS part. It got me thinking.... how easy would it be to do it myself? I…","timeToRead":12}},{"node":{"frontmatter":{"title":"Building a multiplatform DOM DSL in Kotlin","slug":"/dom-dsl-in-kotlin","date":"09-Apr 2022"},"excerpt":"For a project I needed to generate a lot of SVG's both in JS as well as in a backend. I assumed that this could easily be solved by using Kotlin Multiplatform, but I ran into some problems. Eventually I decided to build a minimal DSL to…","timeToRead":11}},{"node":{"frontmatter":{"title":"Building an ECS-architecture using Kotlin MPP","slug":"/building-an-ecs-in-kotlin-mpp","date":"26-Mar 2021"},"excerpt":"In this post we are going to build an Entity-Component-System architecture from scratch using Kotlin Multiplatform Programming and create a simpel Kotlin/JS simulation with it. Entity-Component-System (ECS) is an architectural pattern that…","timeToRead":13}},{"node":{"frontmatter":{"title":"Compositional Patterns in Kotlin Part 2 - Component Model","slug":"/compositional-patterns-in-kotlin-part-2-component-model","date":"07-Mar 2021"},"excerpt":"This is the second part of the post on compositional patterns in Kotlin and will focus on a dynamic, or runtime, composition. In Part 1 we focussed on static, or compile-time, composition. There are a few ways to obtain dynamic composition…","timeToRead":10}},{"node":{"frontmatter":{"title":"Compositional Patterns in Kotlin Part 1 - Delegation","slug":"/compositional-patterns-in-kotlin-part-1-delegation","date":"27-Feb 2021"},"excerpt":"Roughly speaking there are two ways to obtain polymorphic behavior in OOP languages, 'classical' inheritance and composition. There are clear benefits in either approach depending on the domain one is trying to model. So this post is not a…","timeToRead":11}}]}}}